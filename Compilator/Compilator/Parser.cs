// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// Machine:  WG
// DateTime: 20.06.2020 17:46:46
// UserName: HP
// Input file <E:\MetodyTranslacji\projekt\ConsoleApp1\ConsoleApp1\kompilator.y - 20.06.2020 17:46:40>

// options: lines gplex

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;

namespace GardensPoint
{
public enum Tokens {error=2,EOF=3,Program=4,If=5,Else=6,
    While=7,Read=8,Write=9,Return=10,Int=11,Double=12,
    Bool=13,True=14,False=15,Assign=16,Or=17,And=18,
    LogicalOr=19,LogicalAnd=20,Equal=21,NotEqual=22,GreatherThan=23,GreatherThanOrEqual=24,
    LessThan=25,LessThanOrEqual=26,Plus=27,Minus=28,Multiplies=29,Divides=30,
    LogicalNegation=31,BitwiseNegation=32,OpenPar=33,ClosePar=34,OpenBraces=35,CloseBraces=36,
    Eof=37,Semicolon=38,Ident=39,IntNumber=40,RealNumber=41};

public struct ValueType
#line 7 "E:\MetodyTranslacji\projekt\ConsoleApp1\ConsoleApp1\kompilator.y"
{
public string  val;
public char    type;
}
#line default
// Abstract base class for GPLEX scanners
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class ScanObj {
  public int token;
  public ValueType yylval;
  public LexLocation yylloc;
  public ScanObj( int t, ValueType val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class Parser: ShiftReduceParser<ValueType, LexLocation>
{
#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[7];
  private static State[] states = new State[11];
  private static string[] nonTerms = new string[] {
      "line", "start", "$accept", "end", };

  static Parser() {
    states[0] = new State(new int[]{4,4,36,7},new int[]{-2,1,-1,10});
    states[1] = new State(new int[]{3,2,4,4,36,7},new int[]{-1,3});
    states[2] = new State(-1);
    states[3] = new State(-2);
    states[4] = new State(new int[]{35,5});
    states[5] = new State(new int[]{36,6});
    states[6] = new State(-4);
    states[7] = new State(new int[]{37,9},new int[]{-4,8});
    states[8] = new State(-5);
    states[9] = new State(-6);
    states[10] = new State(-3);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-3, new int[]{-2,3});
    rules[2] = new Rule(-2, new int[]{-2,-1});
    rules[3] = new Rule(-2, new int[]{-1});
    rules[4] = new Rule(-1, new int[]{4,35,36});
    rules[5] = new Rule(-1, new int[]{36,-4});
    rules[6] = new Rule(-4, new int[]{37});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 2: // start -> start, line
#line 19 "E:\MetodyTranslacji\projekt\ConsoleApp1\ConsoleApp1\kompilator.y"
                       { ++lineno; }
#line default
        break;
      case 3: // start -> line
#line 20 "E:\MetodyTranslacji\projekt\ConsoleApp1\ConsoleApp1\kompilator.y"
                 { ++lineno; }
#line default
        break;
      case 4: // line -> Program, OpenBraces, CloseBraces
#line 24 "E:\MetodyTranslacji\projekt\ConsoleApp1\ConsoleApp1\kompilator.y"
{
               Console.WriteLine("Ok");


}
#line default
        break;
      case 6: // end -> Eof
#line 36 "E:\MetodyTranslacji\projekt\ConsoleApp1\ConsoleApp1\kompilator.y"
               {
               Console.WriteLine("  line {0,3}:  syntax error - unexpected symbol Eof",lineno);
               ++Compiler.errors;
               yyerrok();
               YYAccept();
               }
#line default
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

#line 47 "E:\MetodyTranslacji\projekt\ConsoleApp1\ConsoleApp1\kompilator.y"

int lineno=1;

public Parser(Scanner scanner) : base(scanner) { }

#line default
}
}
